@using NineMuses.ViewModels
@model ViewVideoViewModel
@{
    ViewBag.Title = Model.Video != null ? Model.Video.Title : "Video Not Found";
}



@if (Model.Video == null)
{
    <h1>Video Not Found</h1>
}

else
{


    <div class="video-view-container">

        <div class="main-video-content pad-20-r">
            <div class="video-container">
                <video class="video" source src="@(Model.Video.Source)" type="video/mp4" controls>
                    Your browser does not support the video format.
                </video>

            </div>

            <div class="title-container fw border-bottom-p10">

                <h1 class="fw pad-10-t">@(Model.Video.Title)</h1>

                <div class="right-box mar-5-t">
                    @{
                        bool? hasLiked = Session["UserID"] != null ? Model.Video.UserHasLiked((long)Session["UserID"]) : null;
                        var likeActive = "";
                        var dislikeActive = "";
                        var likeOn = "";
                        var dislikeOn = "";

                        if (hasLiked != null)
                        {
                            if ((bool)hasLiked)
                            {
                                // Liked
                                dislikeActive = " active";
                                likeOn = " like";
                                likeActive = "";
                                dislikeOn = "";
                            }
                            else
                            {
                                // Disliked
                                likeActive = " active";
                                dislikeOn = " dislike";
                                dislikeActive = "";
                                likeOn = "";
                            }
                        }

                        else
                        {
                            // None of the above
                            likeOn = "";
                            dislikeOn = "";
                            likeActive = " active";
                            dislikeActive = " active";
                        }
                    }

                    <p class="mar-10-t">@(Model.Video.Views) Views</p>

                    @if (Session["UserID"] != null)
                    {
                        <i id="LikeButton" class="fas fa-thumbs-up fa-fw mar-5-l like-dislike-btn@(likeActive)@(likeOn)" data-like="true"></i>
                        <i id="DislikeButton" class="fas fa-thumbs-down fa-fw mar-5-l like-dislike-btn@(dislikeActive)@(dislikeOn)" data-like="false"></i>
                    }

                    else
                    {
                        <a class="sign-in-text" href="@Url.Action("SignIn", "User", new { returnUrl = Request.Url.GetComponents(UriComponents.PathAndQuery, UriFormat.SafeUnescaped).ToString() })">Sign In To Like/Dislike </a>
                    }

                    @{ 
                        var colorClass = "";
                        if (Model.Video.Likes.Count == 0)
                        {
                            colorClass = " no-likes";
                        }
                       }

                    <div class="color-bar mar-5-t@(colorClass)">
                        <div class="like-bar" style="width: @(Model.Video.GetLikePrecentage.ToString().Replace(",", "."))%;" >
                            
                        </div>
                    </div>

                </div>
            </div>

            <div class="upload-date fw mar-10-t">
                <p>@(Model.Video.UploadDate.ToShortDateString())</p>
            </div>

            <div class="bg-col-grey mar-10-t">
                <div class="video-usertag ">
                    <a href="@Url.Action("Profile", "User", new { id = Model.Video.User.UserID })">
                        @(Model.Video.User.Username)
                    </a>
                </div>

                <p>@(Model.Video.Description)</p>
            </div>
            
        </div>

        <div class="other-videos-container pad-20">
            <h1 class="border-bottom-p10 mar-10-b txt-ac">More Videos From @(Model.Video.User.Username)</h1>

            @foreach (var video in Model.VideoList)
            {
                if (Model.Video.VideoID != video.VideoID)
                {
                    <a href="@Url.Action("View", "Video", new { id = video.VideoID })">
                        <div class="other-videos mar-20-b">

                            <img src="@(video.Thumbnail)" />

                            <div class="other-videos-text pad-10-l pad-10-r">
                                <p class="ellipsis">@(video.Title)</p>
                                <p class="ellipsis">@video.UploadDate.ToShortDateString()</p>
                            </div>
                        </div>

                    </a>
                }
            }
        </div>
    </div>
    
}
@Scripts.Render("~/JS/Ajax")
@section scripts
{
    <script>
        var likeBtns = document.getElementsByClassName("like-dislike-btn");
        var likeButton = document.getElementById("LikeButton");
        var dislikeButton = document.getElementById("DislikeButton");

        for (var i = 0; i < likeBtns.length; i++) {
            likeBtns[i].onclick = function (e) {                
                var elem = e.currentTarget;

                if (elem != null) {

                    if (elem.classList.contains("active")) {
                        var like = elem.dataset.like;
                        console.log(like);

                        var d = new Date();
                        var getUrl = "/Video/LikeDislike/@(Model.Video.VideoID)/?like=" + like + "&userID=@(Session["UserID"])&d=" + d.toISOString();

                        ajaxGetBool(getUrl).then(function (e) {
                            var success = e;

                            console.log(success);

                            if (success) {
                                likeButton.classList.add("like");
                                dislikeButton.classList.remove("dislike");
                            }

                            else {
                                likeButton.classList.remove("like");
                                dislikeButton.classList.add("dislike");
                            }

                        });
                    } 
                }
            }
        }

        
    </script>
}